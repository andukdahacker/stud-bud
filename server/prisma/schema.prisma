// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  username   String   @db.VarChar
  email      String   @unique @db.VarChar
  password   String   @db.VarChar
  isVerified Boolean
  profile    Profile?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Profile {
  id                          String             @id @default(cuid())
  profile_bio                 String?            @db.VarChar(200)
  profile_avatar              String?            @db.VarChar
  profile_avatar_public_id    String?            @db.VarChar
  profile_wallpaper           String?            @db.VarChar
  profile_wallpaper_public_id String?            @db.VarChar
  profile_interests           ProfileInterests[]
  requester                   Relationship[]     @relation("requester")
  addressee                   Relationship[]     @relation("addressee")
  specifier                   Relationship[]     @relation("specifier")
  noti_notifier               Notification[]     @relation("notifier")
  noti_receiver               Notification[]     @relation("receiver")
  user                        User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                     String             @unique
  createdAt                   DateTime           @unique @default(now())
  updatedAt                   DateTime           @updatedAt

}

model Interest {
  id                String             @id @default(cuid())
  interest_name     String             @unique @db.VarChar
  profile_interests ProfileInterests[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model ProfileInterests {
  profile     Profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id  String
  interest    Interest @relation(fields: [interest_id], references: [id], onDelete: Cascade)
  interest_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([profile_id, interest_id])
}

model Relationship {
  requester    Profile                @relation("requester", fields: [requester_id], references: [id], onDelete: Cascade)
  requester_id String
  addressee    Profile                @relation("addressee", fields: [addressee_id], references: [id], onDelete: Cascade)
  addressee_id String
  specifier    Profile                @relation("specifier", fields: [specifier_id], references: [id], onDelete: Cascade)
  specifier_id String
  status       RelationshipStatusCode
  isRead       Boolean
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@id([requester_id, addressee_id])
}

enum RelationshipStatusCode {
  REQUESTED
  ACCEPTED
  DECLINED
}

model Notification {
  id          String           @id @default(cuid())
  notifier    Profile          @relation("notifier", fields: [notifier_id], references: [id], onDelete: Cascade)
  notifier_id String
  receiver    Profile          @relation("receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  receiver_id String
  type        NotificationType @relation(fields: [type_id], references: [id])
  type_id     Int
  entity_id   String?
  message     String?
  isRead      Boolean
  createdAt   DateTime         @default(now())

}

model NotificationType {
  id        Int            @id @default(autoincrement())
  type      Notification[]
  main_type String
  sub_type  String

}
