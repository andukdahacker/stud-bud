### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthOutput {
  ErrorFieldOutput: [ErrorFieldOutput!]
  IOutput: IOutput!
  User: User
}

type BuddyNotificationOutput {
  IOutput: IOutput!
  PageInfo: PageInfoIDCursor
  buddyAccepts: [Relationship!]
  buddyRequests: [Relationship!]
  countNotViewedBuddyNotifications: Int
}

input ChangePasswordInput {
  password: String!
  token: String!
}

type Conversation {
  conversation_avatar: String
  conversation_latest_message: Message
  conversation_member: [Profile!]!
  conversation_name: String
  id: String!
}

type ConversationGroup {
  conversation: Conversation!
  conversation_id: String!
  conversation_member_id: String!
  isRead: Boolean!
  isViewed: Boolean!
  joined_at: Date!
  left_at: Date
}

input ConversationGroupWhereUniqueInput {
  conversation_id: String!
  profile_id: String!
}

input ConversationPageInput {
  cursor: String
  take: Int!
}

input ConversationWhereUniqueInput {
  conversation_id: String!
}

input CreateInterestInput {
  interest_name: String!
}

input CreateNotificationInput {
  entity_id: String!
  notifier_id: String!
  receiver_id: [String!]!
  type_id: Int!
}

input CreateProfileInput {
  profile_avatar: Upload
  profile_bio: String
  profile_interest: [CreateInterestInput]!
  profile_wallpaper: Upload
}

input CreateTutorOrderInput {
  problem: String!
  student_id: String!
  tutor_id: String
  tutor_order_interests: [CreateInterestInput]!
  tutor_requirements: String!
}

"""Date custom scalar type"""
scalar Date

input DestroyImageInput {
  img_public_id: String!
}

type ErrorFieldOutput {
  field: String!
  message: String!
}

input ForgotPasswordInput {
  email: String!
}

type GetManyInterestOutput {
  IOutput: IOutput!
  Interest: [Interest]
}

input GetManyProfilesInput {
  cursor: Date
  search_input: String
  take: Int!
}

type GetManyProfilesOutput {
  IOutput: IOutput!
  PageInfo: PageInfoDataCursor
  Profile: [Profile]
}

input GetManyTutorOrdersInput {
  cursor: String
  search_input: String
  take: Int!
}

type GetManyTutorOrdersOutput {
  IOutput: IOutput!
  PageInfoIDCursor: PageInfoIDCursor
  tutor_order: [TutorOrder!]
}

type GetNotificationOutput {
  IOutput: IOutput!
  notifications: [Notification]
}

type IOutput {
  code: Int!
  message: String!
  success: Boolean!
}

type Interest {
  id: ID!
  interest_name: String
  profile_interests: [ProfileInterest!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Message {
  author: Profile!
  conversation_id: String!
  createdAt: Date
  id: String!
  message_author_id: String!
  message_content: String!
}

type Mutation {
  acceptTutor(where_1: ProfileWhereUniqueInput!, where_2: TutorOrderWhereUniqueInput!): TutorOrderOutput
  changePassword(input: ChangePasswordInput!): AuthOutput
  connectBuddy(input: RelationshipInput!): RelationshipOutput
  createNotification(input: CreateNotificationInput!): NotificationMutationOutput
  createProfile(input: CreateProfileInput!): ProfileMutationOutput
  createTutorOrder(input: CreateTutorOrderInput!): TutorOrderOutput
  deleteTutorOrder(where: TutorOrderWhereUniqueInput!): TutorOrderOutput
  forgotPassword(input: ForgotPasswordInput!): AuthOutput
  login(input: LoginInput!): AuthOutput!
  logout: AuthOutput!
  readBuddyNotifications(where: ReadBuddyNotificationsInput!): BuddyNotificationOutput
  readMessage(where: ConversationGroupWhereUniqueInput!): IOutput
  readNotification(where: NotificationWhereUniqueInput!): NotificationMutationOutput
  register(input: RegisterInput!): AuthOutput!
  removeAvatar(input: DestroyImageInput!, where: ProfileWhereUniqueInput!): ProfileMutationOutput
  removeBuddy(input: RelationshipInput!): RelationshipOutput
  removeWallpaper(input: DestroyImageInput!, where: ProfileWhereUniqueInput!): ProfileMutationOutput
  respondBuddy(input: RelationshipInput!): RelationshipOutput
  sendMessage(input: SendMessageInput!, where: ProfileWhereUniqueInput!): SendMessageOutput
  updateProfile(input: CreateProfileInput!, where: ProfileWhereUniqueInput!): ProfileMutationOutput
  updateTutorOrder(input: CreateTutorOrderInput!, where: TutorOrderWhereUniqueInput!): TutorOrderOutput
  verifyEmail(input: VerifyEmailInput!): AuthOutput!
  viewBuddyNotifications(where: ProfileWhereUniqueInput!): BuddyNotificationOutput
  viewMessage(where: ProfileWhereUniqueInput!): IOutput
  viewNotification(where: ProfileWhereUniqueInput!): NotificationMutationOutput
}

type Notification {
  createdAt: Date!
  entity_id: String
  id: String!
  isRead: Boolean!
  isViewed: Boolean!
  message: String
  notifier: Profile
  notifier_id: String!
  receiver_id: String!
  type_id: Int!
}

type NotificationMutationOutput {
  IOutput: IOutput!
}

input NotificationWhereUniqueInput {
  id: String!
}

type PageInfoDataCursor {
  endCursor: Date
  hasNextPage: Boolean!
  lastTake: Int
}

type PageInfoIDCursor {
  endCursor: String
  hasNextPage: Boolean!
  lastTake: Int
}

type Profile {
  buddies: [Relationship!]
  buddyPendings: [Relationship!]
  buddyRequests: [Relationship!]
  createdAt: Date
  id: ID!
  profile_avatar: String
  profile_avatar_public_id: String
  profile_bio: String
  profile_interests: [ProfileInterest]
  profile_wallpaper: String
  profile_wallpaper_public_id: String
  tutor_mode: Boolean!
  user: User
}

type ProfileInterest {
  interest: Interest!
  interest_id: ID!
  profile: Profile!
  profile_id: ID!
}

type ProfileMutationOutput {
  IOutput: IOutput!
  Profile: Profile
}

input ProfileWhereUniqueInput {
  profile_id: ID!
}

type Query {
  getBuddyNotifications(where: ProfileWhereUniqueInput!): BuddyNotificationOutput
  getConversation(page: ConversationPageInput!, where: ConversationWhereUniqueInput!): getConversationOutput
  getManyConversations(where: ProfileWhereUniqueInput!): getManyConversationPutput
  getManyInterests(where: getManyInterestsInput!): GetManyInterestOutput
  getManyProfiles(where: GetManyProfilesInput!): GetManyProfilesOutput
  getManyTutorOrders(where: GetManyTutorOrdersInput!): GetManyTutorOrdersOutput
  getMyTutorOrder(where: ProfileWhereUniqueInput!): GetManyTutorOrdersOutput
  getNotifications(where: ProfileWhereUniqueInput!): GetNotificationOutput
  getProfile(where: ProfileWhereUniqueInput!): ProfileMutationOutput
  getTutorOrder(where: TutorOrderWhereUniqueInput!): TutorOrderOutput
  getUser: User
}

input ReadBuddyNotificationsInput {
  addressee_id: String!
  requester_id: String!
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type Relationship {
  addressee: Profile!
  addressee_id: String!
  createdAt: Date!
  isRead: Boolean!
  isViewed: Boolean!
  requester: Profile!
  requester_id: String!
  specifier_id: String!
  status: RelationshipStatusCode!
  updatedAt: Date!
}

input RelationshipInput {
  addressee_id: String!
  requester_id: String!
  specifier_id: String!
  status: RelationshipStatusCode!
}

type RelationshipOutput {
  IOutput: IOutput!
  Relationship: [Relationship!]
}

enum RelationshipStatusCode {
  ACCEPTED
  DECLINED
  REQUESTED
}

input SendMessageInput {
  conversation_id: String!
  message_content: String!
}

type SendMessageOutput {
  IOutput: IOutput!
  Message: Message
}

type Subscription {
  getBuddyNotifications(where: ProfileWhereUniqueInput!): BuddyNotificationOutput
  getConversation(where: ConversationWhereUniqueInput!): getConversationOutput
  getManyConversations(where: ProfileWhereUniqueInput!): getManyConversationPutput
}

type TutorOrder {
  createdAt: Date!
  id: String!
  isCompleted: Boolean!
  problem: String!
  student: Profile!
  student_id: String!
  tutor: Profile
  tutor_id: String
  tutor_order_interest: [TutorOrderInterests!]
  tutor_requirements: String!
  updatedAt: Date!
}

type TutorOrderInterests {
  interest: Interest!
  interest_id: String!
  tutor_order: TutorOrder!
  tutor_order_id: String!
}

type TutorOrderOutput {
  IOutput: IOutput!
  tutor_order: TutorOrder
}

input TutorOrderWhereUniqueInput {
  id: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  email: String!
  id: ID!
  isVerified: Boolean!
  profile: Profile
  username: String!
}

input VerifyEmailInput {
  token: String!
}

type getConversationOutput {
  Conversation: Conversation
  ConversationPageInfo: PageInfoIDCursor
  IOutput: IOutput!
  Messages: [Message!]
}

type getManyConversationPutput {
  Conversations: [ConversationGroup!]
  IOutput: IOutput!
  countNotViewedConversation: Int
}

input getManyInterestsInput {
  search_input: String
}
