### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthOutput {
  ErrorFieldOutput: [ErrorFieldOutput!]
  IOutput: IOutput!
  User: User
}

input CreateInterestInput {
  interest_name: String!
}

input CreateProfileInput {
  profile_bio: String!
  profile_interest: CreateInterestInput!
}

type ErrorFieldOutput {
  field: String!
  message: String!
}

type IOutput {
  code: Int!
  message: String!
  success: Boolean!
}

type Interest {
  id: ID!
  interest_name: String
  profile_interests: [ProfileInterest!]!
}

type InterestOutput {
  IOutput: IOutput!
  Interest: Interest
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createInterest(input: CreateInterestInput!, where: ProfileWhereUniqueInput!): InterestOutput
  createProfile(input: CreateProfileInput!): ProfileOutput
  login(input: LoginInput!): AuthOutput!
  logout: AuthOutput!
  register(input: RegisterInput!): AuthOutput!
}

type Profile {
  id: ID!
  profile_bio: String
  profile_interests: [ProfileInterest!]!
}

type ProfileInterest {
  interest: Interest!
  interest_id: ID!
  profile: Profile!
  profile_id: ID!
}

type ProfileOutput {
  IOutput: IOutput!
  Profile: Profile
}

input ProfileWhereUniqueInput {
  profile_id: ID!
}

type Query {
  getProfile(where: ProfileWhereUniqueInput!): Profile
  getUser: User
}

input RegisterInput {
  email: String!
  password: String!
  username: String!
}

type User {
  email: String!
  id: ID!
  profile: Profile
  username: String!
}